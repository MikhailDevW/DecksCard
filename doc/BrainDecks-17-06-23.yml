openapi: 3.0.2
info:
  title: 'API приложения для заучивания иностранных слов.'
  version: 'v1'
  description: 'Описаны ручки и действия по ним. 
  Раздел API-auth Описывает регистрацию, подтвреждение и логин пользователя. 
  Раздел API-dashboard описывает работы так называемой главной страницы, 
  где у пользователя отображаются колоды, он может создать новую, 
  отредактировать выбранную или удалить. 
  Раздел API-cards описывает работы с карточками в каждой колоде.'
paths:
  /api/v1/auth/signup/:
    post:
      operationId: SignUp
      description: "Регистрация пользователя. Пользователь вводит email и password. На почту пользователю приходит сообщение с ссылкой актвиации и пока он по ней не перейдет его профиль считается неактивным. Права доступа: Доступно без токена. Поля email должны быть уникальными. Методы: только POST"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        # '200':
        #   content:
        #     application/json:
        #       schema:
        #   description: 'В ответ на создание пользователя, если такой почты не обнаружено возвращается статус 200, бед payload.'
        '400':
          content:
            application/json:
              schema:
                type: object
                properties: 
                  email:
                    type: string
          description: 'Ошибка создания пользователя, такая почта уже существует в БД.'
      tags:
      - api-auth
#   /api/v1/auth/login/:
#     post:
#       operationId: Log-in
#       description: 'Пользователь заполняет свои email и пароль, которые он ввел при регистрации. При успешной валидации и если профиль подтвержден мы логинимся (сервер отдает JWT-токен)'
#       parameters: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/MyTokenObtainPair'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/MyTokenObtainPair'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/MyTokenObtainPair'
#       responses:
#         '200':
#           description: Сервер отдает валидный токен.
#           content:
#             application/json:
#               schema:
#                 type: object
#                 properties: 
#                   access: 
#                     type: string
#         '401':
#           description: Ответ ошибка авторизации.
#           content: 
#             application/json:
#               schema: 
#                 type: object
#                 properties: 
#                   detail:
#                     tyoe: string
#       tags:
#       - api-auth
#   /api/v1/auth/confirm/{uid}/{code}/:
#     get:
#       operationId: Confirm Code
#       description: "Пользовател подтвержадет свою почту по ссылке, которая пришла при регистрации на почту. Права доступа: Доступно без токена. Методы: только POST."
#       parameters:
#       - name: uid
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       - name: code
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       requestBody:
#         content:
#           aplication/json:
#             schema:
#               $ref: '#/components/schemas/ConfirmCode'
#       responses:
#         '200':
#           content:
#           description: 'Когда пользователь переходит поссылке выполняется активация профиля пользователя и сервер возвращает 200 без payload.'
#       tags:
#       - api-auth
#   /api/v1/dashboard/:
#     get:
#       operationId: Получение колод.
#       description: GET-запрос по которому зарегестрированному пользователю отдаются те колоды которые у нео есть.
#       parameters: []
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   type: object
#                   properties: 
#                     slug:
#                       type: string
#                     author:
#                       type: string
#                     title: 
#                       type: string
#                     description:
#                       type: string
#                     cards_per_day:
#                       type: number
#                     amount:
#                       type: number
#           description: ''
#       tags:
#       - api-dashboard
#     post:
#       operationId: Создание колоды.
#       description: POST-метод по котрому создается новая колода.
#       parameters: []
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Deck'
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Deck'
#           description: ''
#       tags:
#       - api-dashboard
#   /api/v1/dashboard/{slug}/:
#     get:
#       operationId: Получение свойств колоды.
#       description: Запрос свойств конкретной колоды.
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Deck'
#           description: ''
#       tags:
#       - api-dashboard
#     put:
#       operationId: Обновить параметры колоды.
#       description: Обновление парамтеров выбранной колоды по слагу. Можно обновить такие параметры как название, описание, кол-во карт в день.
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Deck'
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Deck'
#           description: ''
#       tags:
#       - api-dashboard
#     patch:
#       operationId: Обновить параметры колоды
#       description: Обновление парамтеров выбранной колоды по слагу. Можно обновить такие параметры как название, описание, кол-во карт в день.
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Deck'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Deck'
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Deck'
#           description: ''
#       tags:
#       - api-dashboard
#     delete:
#       operationId: Удалить выбранную колоду
#       description: Удалить выбранную колоду по слагу со всем содержимым что там есть.
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       responses:
#         '204':
#           description: ''
#       tags:
#       - api-dashboard
#   /api/v1/dashboard/{slug}/cards/:
#     get:
#       operationId: Получение карточек на сегодня.
#       description: 'GET-запрос на получение карточек в конкретной колоде, которые требуется сегодня заучить'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#     post:
#       operationId: Создание новой карточки.
#       description: 'Запрос на создание новой карточки.'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Card'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Card'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Card'
#       responses:
#         '201':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#   /api/v1/dashboard/{slug}/cards/all/:
#     get:
#       operationId: Получение всех карточек словаря.
#       description: 'GET-запрос на получение всех карточек которые есть в колоде.'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#   /api/v1/dashboard/{slug}/cards/{id}/:
#     get:
#       operationId: Получение свойств карточки
#       description: 'По данному запросу пользователь получает свойство картчоки. Какие поля есть и что там.'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       - name: id
#         in: path
#         required: true
#         description: A unique integer value identifying this card.
#         schema:
#           type: string
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#     put:
#       operationId: Обновление карточки
#       description: 'Пользователь обновляет данные в карточке.'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       - name: id
#         in: path
#         required: true
#         description: A unique integer value identifying this card.
#         schema:
#           type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Card'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Card'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Card'
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#     patch:
#       operationId: partialUpdateCard
#       description: ''
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       - name: id
#         in: path
#         required: true
#         description: A unique integer value identifying this card.
#         schema:
#           type: string
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Card'
#           application/x-www-form-urlencoded:
#             schema:
#               $ref: '#/components/schemas/Card'
#           multipart/form-data:
#             schema:
#               $ref: '#/components/schemas/Card'
#       responses:
#         '200':
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/Card'
#           description: ''
#       tags:
#       - api-cards
#     delete:
#       operationId: Удаление картчоки.
#       description: 'Пользователь удаляет конкретную картчоку.'
#       parameters:
#       - name: slug
#         in: path
#         required: true
#         description: ''
#         schema:
#           type: string
#       - name: id
#         in: path
#         required: true
#         description: A unique integer value identifying this card.
#         schema:
#           type: string
#       responses:
#         '204':
#           description: ''
#       tags:
#       - api-cards
# components:
#   schemas:
#     Deck:
#       type: object
#       properties:
#         author:
#           type: string
#           readOnly: true
#         title:
#           type: string
#           maxLength: 200
#         description:
#           type: string
#         cards_per_day:
#           type: integer
#         amount:
#           type: string
#           readOnly: true
#       required:
#       - title
#     Card:
#       type: object
#       properties:
#         id:
#           type: integer
#           readOnly: true
#         front_side:
#           type: string
#           maxLength: 200
#         prompt:
#           type: string
#           nullable: true
#           maxLength: 200
#         back_side:
#           type: string
#           maxLength: 200
#         example:
#           type: string
#         next_use_date:
#           type: string
#         level:
#           type: integer
#       required:
#       - front_side
#       - back_side
#     SignUp:
#       type: object
#       properties:
#         email:
#           type: string
#           format: email
#           maxLength: 100
#         password:
#           type: string
#           minLength: 8
#           pattern: (?=.*[A-Z])
#         first_name:
#           type: string
#           nullable: true
#           maxLength: 150
#         last_name:
#           type: string
#           nullable: true
#           maxLength: 150
#       required:
#       - email
#       - password
#     MyTokenObtainPair:
#       type: object
#       properties:
#         email:
#           type: string
#         password:
#           type: string
#           writeOnly: true
#       required:
#       - email
#       - password
#     ConfirmCode:
#       type: object
#       properties: {}
