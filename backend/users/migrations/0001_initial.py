# Generated by Django 3.2.16 on 2023-10-01 17:54

from django.db import migrations, models
import users.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=100, unique=True, verbose_name='email')),
                ('username', models.CharField(blank=True, db_index=True, max_length=150, null=True, unique=True, validators=[users.validators.username_validator], verbose_name='username')),
                ('password', models.CharField(max_length=128, validators=[users.validators.password_validator], verbose_name='password')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='user first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='user last name')),
                ('is_active', models.BooleanField(default=True, verbose_name='user active status')),
                ('role', models.CharField(choices=[('USER', 'Common user'), ('PREMIUM', 'Premium user'), ('ADMIN', 'Site admin'), ('SUPERUSER', 'Superuser')], default='USER', max_length=13, verbose_name='user role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
