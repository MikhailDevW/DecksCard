openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /api/v1/dashboard/:
    get:
      operationId: listDecks
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deck'
          description: ''
      tags:
      - api
    post:
      operationId: createDeck
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Deck'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
          description: ''
      tags:
      - api
  /api/v1/dashboard/{id}/:
    get:
      operationId: retrieveDeck
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this deck.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
          description: ''
      tags:
      - api
    put:
      operationId: updateDeck
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this deck.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Deck'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateDeck
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this deck.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Deck'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Deck'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Deck'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deck'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyDeck
      description: CRUD Deck model with viewset and limit offset pagination.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this deck.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/v1/dashboard/{deck_id}/cards/:
    get:
      operationId: listCards
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
          description: ''
      tags:
      - api
    post:
      operationId: createCard
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Card'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
      tags:
      - api
  /api/v1/dashboard/{deck_id}/cards/{id}/:
    get:
      operationId: retrieveCard
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
      tags:
      - api
    put:
      operationId: updateCard
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Card'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCard
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Card'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Card'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Card'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCard
      description: CRUD Comment model with viewset.
      parameters:
      - name: deck_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      - name: id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/auth/users/:
    get:
      operationId: listCustomUsers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    post:
      operationId: createCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
      tags:
      - api
  /api/auth/users/me/:
    get:
      operationId: meCustomUser
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    put:
      operationId: meCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: meCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    delete:
      operationId: meCustomUser
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/auth/users/{id}/:
    get:
      operationId: retrieveCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    put:
      operationId: updateCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    patch:
      operationId: partialUpdateCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - api
    delete:
      operationId: destroyCustomUser
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this custom user.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - api
  /api/auth/users/activation/:
    post:
      operationId: activationCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
      tags:
      - api
  /api/auth/users/resend_activation/:
    post:
      operationId: resendActivationCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - api
  /api/auth/users/reset_password/:
    post:
      operationId: resetPasswordCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - api
  /api/auth/users/reset_password_confirm/:
    post:
      operationId: resetPasswordConfirmCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
      tags:
      - api
  /api/auth/users/reset_email/:
    post:
      operationId: resetUsernameCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
      tags:
      - api
  /api/auth/users/reset_email_confirm/:
    post:
      operationId: resetUsernameConfirmCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
      tags:
      - api
  /api/auth/users/set_password/:
    post:
      operationId: setPasswordCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
      tags:
      - api
  /api/auth/users/set_email/:
    post:
      operationId: setUsernameCustomUser
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsernameRetype'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsernameRetype'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsernameRetype'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsernameRetype'
          description: ''
      tags:
      - api
  /api/auth/create/:
    post:
      operationId: createTokenObtainPair
      description: 'Takes a set of user credentials and returns an access and refresh
        JSON web

        token pair to prove the authentication of those credentials.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
      tags:
      - api
  /api/auth/refresh/:
    post:
      operationId: createTokenRefresh
      description: 'Takes a refresh type JSON web token and returns an access type
        JSON web

        token if the refresh token is valid.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
      tags:
      - api
  /api/auth/verify/:
    post:
      operationId: createTokenVerify
      description: 'Takes a token and indicates if it is valid.  This view provides
        no

        information about a token''s fitness for a particular use.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
      tags:
      - api
components:
  schemas:
    Deck:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        author:
          type: string
          readOnly: true
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
        title:
          type: string
          maxLength: 200
        description:
          type: string
        cards_per_day:
          type: integer
        amount:
          type: string
          readOnly: true
      required:
      - slug
      - title
    Card:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        front_side:
          type: string
          maxLength: 200
        prompt:
          type: string
          nullable: true
          maxLength: 200
        back_side:
          type: string
          maxLength: 200
        example:
          type: string
        level:
          type: integer
      required:
      - front_side
      - back_side
    User:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 255
        last_name:
          type: string
          maxLength: 255
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
      - first_name
      - last_name
    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        username:
          type: string
          nullable: true
          maxLength: 255
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - uid
      - token
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - uid
      - token
      - new_password
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          maxLength: 255
      required:
      - new_email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - new_password
      - current_password
    SetUsernameRetype:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          maxLength: 255
        re_new_email:
          type: string
      required:
      - current_password
      - new_email
      - re_new_email
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          writeOnly: true
      required:
      - email
      - password
    TokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
      required:
      - token
